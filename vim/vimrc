"this executes plug to load plugins
call plug#begin( '~/.vim/plugged' )
  " Editing
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-sleuth'
  Plug 'tpope/vim-repeat'
  Plug 'tpope/vim-endwise'
  Plug 'tpope/vim-eunuch'
  Plug 'vim-scripts/tComment'
  Plug 'vim-scripts/auto-pairs-gentle'
  Plug 'jpalardy/vim-slime'
  " Appearance
  Plug 'deviantfero/wpgtk.vim'
  " Navigation
  Plug 'haya14busa/incsearch.vim'
  Plug 'junegunn/vim-easy-align'
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' }
  Plug 'junegunn/fzf.vim'
  Plug 'ludovicchabant/vim-gutentags'
  Plug 'tpope/vim-vinegar'
  Plug 'majutsushi/tagbar'
  Plug 'thinca/vim-visualstar'
  " Syntax
  Plug 'mxw/vim-jsx'
  Plug 'mattreduce/vim-mix'
  Plug 'mattn/emmet-vim', { 'for': ['html', 'php', 'jsp', 'javascript'] }
  Plug 'elixir-editors/vim-elixir'
  Plug 'jelera/vim-javascript-syntax'
  Plug 'vim-ruby/vim-ruby'
  " Language additions
  Plug 'SirVer/ultisnips'  | Plug 'honza/vim-snippets'
  Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }
  Plug 'Valloric/YouCompleteMe', { 'do': './install.py --system-libclang --clang-completer --tern-completer --gocode-completer' }
  Plug 'slashmili/alchemist.vim', { 'for': 'elixir' }
  Plug 'w0rp/ale'
  " LaTeX
  Plug 'lervag/vimtex'
  " Wrapppers
  Plug 'tpope/vim-fugitive'
  Plug 'diepm/vim-rest-console', { 'for': 'rest' }
call plug#end()

" remaps "
""""""""""
nmap <C-g> :GitFiles<cr>
nmap <C-f> :Files<cr>
nmap <C-o> :Buffers<cr>
nmap <S-k> :Ag <Down>
" nnoremap <silent><f3> :call HlToggle()<cr> 
nnoremap <silent><f4> :call NumberToggle()<cr>
nmap <f8> :TagbarToggle<cr>
nmap <F9> :Gstatus<cr>
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" :h g:incsearch#auto_nohlsearch
set hlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

"Move more easily between splits
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

"for easy-align plugin.
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" commands "
""""""""""

" save as root
if !exists(':Sw')
  command Sw :execute ':SudoWrite'
endif

"  snippets  "
""""""""""""""
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<c-j>"
let python_highlight_all = 1

" editing options "
""""""""""""""""""
set wmh=0 "set window minmal height
set wmw=0 "set window minmal width
set nowrap
set sj=-50 "set scrolling to emacs like
set regexpengine=1
set number	"line numbers on the left
set norelativenumber "normal numbers as default
set nocompatible	"no vi compatibility
set noexrc	"don't use ~/.exrc config
set nocursorline "faster drawing
set noerrorbells "no audio bell aka beeping
set novisualbell "no visual bell aka blinking
set incsearch "search while typing
set mouse=a "Use mouse to navigate the file
set ttyfast "faster scrolling
set ttimeoutlen=10
set lazyredraw "less redraws
set splitbelow "shows info or documentation below code, so code doesn't move
set wildmenu "emacs like command autocompletion
set scrolloff=1
set sidescrolloff=1
set autoread "auto read changes in a file, u to undo
set backupcopy=yes 
let g:AutoPairsUseInsertedCount=1 "gentle-auto-close
set previewheight=15 "fugitive.vim window


" others "
""""""""""

set shell=/bin/bash "shell to use
set t_vb=	"disable all bells
set undolevels=1000	"undo levels
set foldmethod=marker "allow marking folds
filetype plugin indent on
syntax on	"color syntax highlighting
filetype plugin on	"load the filetype specific config

" netrw options "
""""""""""""""""""
let g:netrw_winsize = -30
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4

" indent options "
""""""""""""""""""
set autoindent	"set indenting
set ts=4	"set tab space
set sw=4        "set soft tab
" set noexpandtab	"do not expand a tab to spaces
set shiftwidth=4	"set autoindent to one tab
packadd! matchit


" color options "
"""""""""""""""""
set t_Co=256
colorscheme wpgtk

" hpppl preferences for vim            "
"""""""""""""""""""""""""""""""""""""""""
autocmd BufNewFile,BufRead *.hpppl set syntax=hpppl
autocmd BufNewFile,BufRead *.tex set wrap

" vim airline "
"""""""""""""""""
set laststatus=2
let $PYTHONPATH='/usr/lib/python2/site-packages'
function! s:statusline_expr()
  let mod = "%{&modified ? '[+]' : !&modifiable ? '[x]' : ''}"
  let ro  = "%{&readonly ? '[RO]' : ''}"
  let ft  = "%{len(&filetype) ? '['.&filetype.']' : ''}"
  let fug = "%{exists('g:loaded_fugitive') ? fugitive#statusline() : ''}"
  let sep = '%='
  let spt  = "[%{(&expandtab) ? 's' : 't'}:%{&sw}]"
  let pos = ' %-12(%l : %c%V%) '
  let pct = ' %P '
  return '[%n] %f %<'.mod.ro.ft.fug.sep.pos.pct.spt
endfunction
let &statusline = s:statusline_expr()


" TTY only "
""""""""""""
if has("gui_running")
  set background=dark
  colorscheme peachpuff
  set gfn=menlo\ 9
endif

"auto complete"
"""""""""""""""
silent! let g:EclimCompletionMethod = 'omnifunc'
silent! let g:EclimJavascriptValidate = 0
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_show_diagnostics_ui = 0
let g:deoplete#enable_at_startup = 1


"linters"
"""""""""
let g:ale_linters = {
  \'python':['flake8'],
  \'php':['php -l'],
  \'c++':['gcc'],
  \'c':['gcc'],
  \'go':['gofmt'],
  \'tex':[],
  \'ruby':[],
  \'eruby': [],
  \'javascript': ['eslint'],
\}
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0

"latex"
"""""""
let g:vimtex_view_method = 'mupdf'
let g:tex_flavor = "latex"

"shell"
"""""""
let g:slime_target = "tmux"
let NERDTreeHijackNetrw = 1
